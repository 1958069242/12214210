// "lib": "vue-cli-service build --target lib ./src/packages/index.js --name playvr --dest playvr"
const { defineConfig } = require('@vue/cli-service')
// var path = require('path')

// 执行环境
// const NODE_ENV = process.env.NODE_ENV
module.exports = defineConfig({
	// 关闭eslint校验
	lintOnSave: false,
	// transpileDependencies: true,
	// productionSourceMap: true,
	// publicPath: '/',
    // outputDir: 'package',
	// entry: NODE_ENV == 'development' ? './src/main.js' : './src/packages/index.js',
	// output: {
	// 	//修改打包出口，在最外级目录打包出一个 index.js 文件，我们 import 默认会指向这个文件
	// 	path: path.resolve(__dirname, './dist'),
	// 	publicPath: '/dist/',
	// 	filename: "playvr.js", //指定最终打包成dist文件夹下的文件名
	// 	library: "playvr",  // 指定的就是你使用require时的模块名
	// 	libraryTarget: "umd", //libraryTarget会生成不同umd的代码,可以只是commonjs标准的，也可以是指amd标准的，也可以只是通过script标签引入的
	// 	umdNamedDefine: true  //会对 UMD 的构建过程中的 AMD 模块进行命名。否则就使用匿名的 define
	// },
	devServer: {
		port: 3090,
	},
	// chainWebpack: config => {
	// 	config.resolve.alias
	// 		.set('@', resolve('src')) // key,value自行定义，比如.set('@@', resolve('packages/package'))

	// },
	
})

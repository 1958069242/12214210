{"remainingRequest":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\my-project\\digit\\src\\views\\webGL\\index.vue?vue&type=style&index=0&id=794cf052&lang=css&","dependencies":[{"path":"D:\\my-project\\digit\\src\\views\\webGL\\index.vue","mtime":1676206438326},{"path":"D:\\my-project\\digit\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICAjY29udGFpbmVyIHsKCQl3aWR0aDogMTAwJTsKICAgICAgICBoZWlnaHQ6IDEwODBweDsKCX0KCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA2QA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/webGL","sourcesContent":["<template>\r\n    <div class=\"webGl-page\">\r\n        <div id=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as Three from 'three'\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n// import { OBJLoader } from 'three-obj-mtl-loader'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n// import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\n// let OrbitControls = require('three-orbit-controls')(Three);\r\nexport default {\r\n    data(){\r\n        return{\r\n            renderer: '', //渲染器\r\n            scene: '', //场景\r\n            light: '', //光源\r\n            camera: '', //相机\r\n            controls: '', //控制器\r\n            mesh:null\r\n        }\r\n    },\r\n    created(){\r\n\r\n    },\r\n    mounted(){\r\n        this.init4()\r\n        this.animate()\r\n    },\r\n    methods:{\r\n        animate(){\r\n            requestAnimationFrame(this.animate)\r\n            this.renderer.render(this.scene, this.camera); //执行渲染操作\r\n        },\r\n\r\n\r\n        // 全景贴图\r\n        init1(){\r\n            let container = document.getElementById('container');\r\n            this.camera = new Three.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);\r\n            this.camera.position.set(0, 0, 100)\r\n            this.scene = new Three.Scene();\r\n            this.camera.lookAt(this.scene.position);\r\n            this.renderer = new Three.WebGLRenderer({\r\n                antialias: true\r\n            });\r\n            this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n            container.appendChild(this.renderer.domElement);\r\n            let urls = [\r\n                require('../../assets/img/home.left.jpg'),\r\n                require('../../assets/img/home.right.jpg'),\r\n                require('../../assets/img/home.top.jpg'),\r\n                require('../../assets/img/home.bottom.jpg'),\r\n                require('../../assets/img/home.front.jpg'),\r\n                require('../../assets/img/home.back.jpg')\r\n            ]\r\n            let cubeTexture = new Three.CubeTextureLoader().load(urls);\r\n            this.scene.background = cubeTexture;\r\n          \r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement); // 初始化控制器\r\n        },\r\n\r\n        // 球形贴图\r\n\r\n        init4(){\r\n            let container = document.getElementById('container');\r\n            this.camera = new Three.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);\r\n            this.camera.position.set(30, 20, 80)\r\n            // this.camera.position.z = 1000;\r\n            this.scene = new Three.Scene();\r\n            let sphereGeometry = new Three.SphereGeometry(200, 60, 60);\r\n            sphereGeometry.scale(-1, 1, 1);\r\n\r\n            //添加材质     \r\n            var textureLoader = new Three.TextureLoader();\r\n            const texture = textureLoader.load(require('../../assets/img/sn.png'));\r\n            // const texture = textureLoader.load(require('../../assets/img/brown_photostudio_02_4k.exr'));\r\n            const material = new Three.MeshBasicMaterial(\r\n                {\r\n                    // color: 0x00ff00,\r\n                    map: texture,\r\n                    // //双面渲染  \r\n                    side: Three.DoubleSide\r\n                });\r\n\r\n            this.mesh = new Three.Mesh(sphereGeometry, material);\r\n            this.scene.add(this.mesh);\r\n            this.renderer = new Three.WebGLRenderer({\r\n                antialias: true\r\n            });\r\n\r\n            //指定渲染器的高宽(和画布框的大小一致)\r\n            this.renderer.setPixelRatio(window.devicePixelRatio);\r\n            this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n            //将指定的渲染器加入到Dom容器中\r\n            container.appendChild(this.renderer.domElement);\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement); // 初始化控制器\r\n        },\r\n\r\n\r\n        // 立方体贴图\r\n\r\n        init2(){\r\n            //获取DOM容器\r\n            let container = document.getElementById('container');\r\n            //设置相机的角度  宽高比  近端面  远端面\r\n            this.camera = new Three.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);\r\n            //设置相机在三维坐标的位置\r\n            this.camera.position.set(0, 0, 2)\r\n            this.camera.position.z = 5;\r\n            //设置场景\r\n            this.scene = new Three.Scene();\r\n            //添加正方体  参数分别是长  宽  高\r\n            let geometry = new Three.BoxGeometry(0.3, 0.3, 0.3);\r\n\r\n            //添加材质     \r\n            var textureLoader = new Three.TextureLoader();\r\n            const texture = textureLoader.load('https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.mp.sohu.com%2Fupload%2F20170522%2Fce881ff0022548a5b591495d7daad683_th.png&refer=http%3A%2F%2Fimg.mp.sohu.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630716827&t=9e50342e5c8fbdf1cce7f010edfe348f');\r\n            // let material = new Three.MeshNormalMaterial();\r\n            const material = new Three.MeshBasicMaterial(\r\n            {\r\n                map: texture,\r\n                //双面渲染  \r\n                side: Three.DoubleSide\r\n            });\r\n            //将正方体以及材质放入网格中\r\n            this.mesh = new Three.Mesh(geometry, material);\r\n            //在场景中添加网格\r\n            this.scene.add(this.mesh);\r\n            //开启反锯齿\r\n            this.renderer = new Three.WebGLRenderer({\r\n                antialias: true\r\n            });\r\n            //指定渲染器的高宽(和画布框的大小一致)\r\n            this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n            //将指定的渲染器加入到Dom容器中\r\n            container.appendChild(this.renderer.domElement);\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement); // 初始化控制器\r\n        },\r\n\r\n\r\n        // 模型加载\r\n        init3(){\r\n            let container = document.getElementById('container');\r\n            this.camera = new Three.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);\r\n            this.camera.position.set(0, 1, 2)\r\n            this.camera.position.z = 5;\r\n            this.scene = new Three.Scene();\r\n            this.scene.background = new Three.Color(\"#ccc\")\r\n            this.scene.environment = new Three.Color(\"#ccc\")\r\n            \r\n\r\n            const grid = new Three.GridHelper(10,10)\r\n            grid.material.opacity = 0.2\r\n            grid.material.transparent = true\r\n            this.scene.add(grid);\r\n\r\n            this.renderer = new Three.WebGLRenderer({\r\n                antialias: true\r\n            });\r\n            this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n\r\n\r\n            container.appendChild(this.renderer.domElement);\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement); // 初始化控制器\r\n\r\n\r\n            let loader = new GLTFLoader();\r\n\r\n            // 机器狗\r\n            // loader.load('robot_cat_-_high_poly/scene.gltf',  ( gltf )=> {\r\n            //     this.scene.add(gltf.scene);\r\n            // });\r\n\r\n            // 汽车\r\n            // loader.load('carglb.glb',  ( gltf )=> {\r\n            //     this.scene.add(gltf.scene);\r\n            // });\r\n\r\n\r\n            // 汽车\r\n            loader.load('ferrari.glb',  ( gltf )=> {\r\n                this.scene.add(gltf.scene);\r\n            });\r\n\r\n\r\n\r\n            // 添加灯光\r\n            const light1 = new Three.DirectionalLight(0xffffff,1)\r\n            light1.position.set(0,0,1)\r\n            this.scene.add(light1)\r\n\r\n            const light2 = new Three.DirectionalLight(0xffffff,1)\r\n            light2.position.set(0,2,10)\r\n            this.scene.add(light2)\r\n\r\n            const light3 = new Three.DirectionalLight(0xffffff,1)\r\n            light3.position.set(0,0,-10)\r\n            this.scene.add(light3)\r\n        },\r\n\r\n        init () {\r\n            const container = document.getElementById('container')\r\n            //场景\r\n            this.scene = new Three.Scene();\r\n            // var ambient = new Three.AmbientLight(0x444444, 3); //添加光源  颜色和光照强度\r\n            // var axisHelper = new Three.AxesHelper(600); //添加辅助坐标系\r\n            // this.scene.add(ambient, axisHelper);\r\n\r\n            // 初始化相机\r\n            this.camera = new Three.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000)//使用透视相机\r\n            this.camera.position.set(0, 0, 10); //设置相机位置\r\n            this.camera.position.z = 1;\r\n            // this.camera.lookAt(new Three.Vector3(0, 0, 0)); // 相机看向\r\n            \r\n\r\n            //添加正方体  参数分别是长  宽  高\r\n\t\t\tlet geometry = new Three.BoxGeometry(0.3, 0.3, 0.3);\r\n\r\n            // 渲染\r\n            this.renderer = new Three.WebGLRenderer()\r\n\t\t\t// this.renderer.setClearColor(0xffffff); //添加背景颜色\r\n\t\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight); // 设定渲染器尺寸\r\n            // this.renderer.setPixelRatio(window.devicePixelRatio) // 为了兼容高清屏幕\r\n            // const container = document.getElementById('container')\r\n            container.appendChild(this.renderer.domElement)\r\n\r\n            // r添加光源\r\n            // const color = 0xFFffFF;\r\n            // const intensity = 1;\r\n            // const spotLight = new Three.SpotLight(0xffffff);\r\n            // const light = new Three.AmbientLight(color);\r\n            // light.position.set(-1, 2, 4);\r\n            // this.scene.add(light);\r\n\r\n            // var textureLoader = new Three.TextureLoader(); //创建纹理贴图\t\t\r\n            // var img = textureLoader.load(require('../../assets/img/home3.jpeg'));\r\n            // var geometry = new Three.SphereGeometry(130, 256, 256); // 球体网格模型\r\n            // var material = new Three.MeshLambertMaterial({\r\n                // map: img, //设置颜色贴图属性值\r\n                // side: Three.DoubleSide, //双面渲染\r\n            // });\r\n            var material = new Three.MeshLambertMaterial();\r\n            this.mesh= new Three.Mesh(geometry, material); //网格模型对象Mesh\t\r\n            this.scene.add(this.mesh);\r\n            // this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            // this.controls.target.set(0, 0, 0)\r\n            // this.controls = new OrbitControls(this.camera, this.renderer.domElement); // 初始化控制器\r\n            // this.controls.target.set(0, 0, 0); // 设置控制器的焦点，使控制器围绕这个焦点进行旋转\r\n            // this.controls.minDistance = 10; // 设置移动的最短距离（默认为零）\r\n            // this.controls.maxPolarAngle = Math.PI; //绕垂直轨道的距离（范围是0-Math.PI,默认为Math.PI）\r\n            // this.controls.maxDistance = 30; // 设置移动的最长距离（默认为无穷）\r\n            // this.controls.enablePan = false; //禁用右键功能\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n    #container {\r\n\t\twidth: 100%;\r\n        height: 1080px;\r\n\t}\r\n\r\n</style>"]}]}
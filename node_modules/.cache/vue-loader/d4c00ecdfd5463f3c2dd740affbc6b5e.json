{"remainingRequest":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\my-project\\digit\\src\\views\\build\\index.vue?vue&type=style&index=0&id=6046ad72&lang=css&","dependencies":[{"path":"D:\\my-project\\digit\\src\\views\\build\\index.vue","mtime":1690849971838},{"path":"D:\\my-project\\digit\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICAjY29udGFpbmVyIHsKCQl3aWR0aDogMTAwJTsKICAgICAgICBoZWlnaHQ6IDEwODBweDsKCX0KICAgIC5kYXRhbGFiZWx7CiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyOSA3OCAyMTYgLyAwLjYpOwogICAgICAgIHBhZGRpbmc6MjBweCA0MHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7CiAgICAgICAgY29sb3I6ICNmZmY7CiAgICB9CiAgICAubGFiZWx7CiAgICAgICAgY29sb3I6IHJlZDsKICAgICAgICBmb250LXNpemU6IDMwcHg7CiAgICB9Cgo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA2WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/build","sourcesContent":["<template>\r\n    <div class=\"webGl-page\">\r\n        <div id=\"container\"></div>\r\n        <video id=\"videoContainer\" style=\"position:absolute;top:0px;left:0px;z-index:100;visibility: hidden\"></video>\r\n        <div class=\"datalabel\"  :style=\"{'top': labelStyle.top + 'px', \r\n                                    'left': labelStyle.left + 'px', \r\n                                    'display': labelStyle.isShow ? 'inline-block' : 'none' }\">\r\n            {{ labelStyle.name }}\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as Three from 'three'\r\n// import { CSS2DObject } from \"three/examples/jsm/renderers/CSS2DRenderer\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'\r\nimport TWEEN from '@tweenjs/tween.js'\r\nexport default {\r\n    data(){\r\n        return{\r\n            renderer: '', //渲染器\r\n            scene: '', //场景\r\n            light: '', //光源\r\n            camera: '', //相机\r\n            controls: '', //控制器\r\n            mesh:null,\r\n            videoStatus:true,\r\n            labelStyle:{\r\n                top:'',\r\n                left:'',\r\n                isShow:false,\r\n                name:'机房四',\r\n            }\r\n        }\r\n    },\r\n    created(){\r\n\r\n    },\r\n    mounted(){\r\n        this.init()\r\n        this.animate()\r\n        this.initLight()\r\n    },\r\n    methods:{\r\n        animate(){\r\n            TWEEN.update();\r\n            requestAnimationFrame(this.animate)\r\n            this.renderer.render(this.scene, this.camera); //执行渲染操作\r\n            this.controls.update()  \r\n        },\r\n\r\n        init(){\r\n            let container = document.getElementById('container');\r\n            this.camera = new Three.PerspectiveCamera(65, container.clientWidth / container.clientHeight, 0.1, 1000);\r\n            this.camera.position.set(0, 15, 100)\r\n            this.scene = new Three.Scene();\r\n            this.camera.lookAt(this.scene.position);\r\n            this.renderer = new Three.WebGLRenderer({\r\n                antialias: true\r\n            });\r\n            this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n            container.appendChild(this.renderer.domElement);\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement); // 初始化控制器\r\n            this.controls.maxPolarAngle = 80 / 360 *2 * Math.PI; //绕垂直轨道的距离（范围是0-Math.PI,默认为Math.PI）\r\n            this.controls.minPolarAngle = 0; \r\n            this.controls.enableDamping = true    //阻尼 渲染函数调用update 重新计算  \r\n            this.controls.minDistance = 10; // 设置移动的最短距离（默认为零）\r\n            this.controls.maxDistance = 100; // 设置移动的最长距离（默认为无穷）\r\n            \r\n            this.addGird()\r\n            this.initFloor()\r\n            this.initSkyBox()\r\n            this.loadBoard()\r\n            // this.loadBuilding()\r\n            this.loadDataCenter()\r\n            this.fly()\r\n            this.passcar()\r\n            this.renderer.domElement.addEventListener('click', (e) => {\r\n                this.modelClick(e)\r\n            })\r\n        },\r\n\r\n        addGird(size= 1000,divisions= 20,colorCenterLine = 0x888888,colorGrid = 0x888888) {\r\n            const grid = new Three.GridHelper(size, divisions, colorCenterLine, colorGrid);\r\n            this.scene.add(grid);\r\n        },\r\n\r\n        initLight(){\r\n            // 添加灯光\r\n            // const light1 = new Three.DirectionalLight(0xffffff,1)\r\n            // light1.position.set(0,0,1)\r\n            // this.scene.add(light1)\r\n\r\n            // const light2 = new Three.DirectionalLight(0xffffff,1)\r\n            // light2.position.set(0,2,10)\r\n            // this.scene.add(light2)\r\n\r\n            // const light3 = new Three.DirectionalLight(0xffffff,1)\r\n            // light3.position.set(0,0,-10)\r\n            // this.scene.add(light3)\r\n\r\n            const light4 = new Three.HemisphereLight( 0xffffbb, 0x080820, 1 ); \r\n            this.scene.add( light4 );\r\n        },\r\n\r\n        //  天空\r\n        initSkyBox(){\r\n            let urls = [\r\n                require('../../assets/sky/posx.jpg'),\r\n                require('../../assets/sky/negx.jpg'),\r\n                require('../../assets/sky/posy.jpg'),\r\n                require('../../assets/sky/negy.jpg'),\r\n                require('../../assets/sky/posz.jpg'),\r\n                require('../../assets/sky/negz.jpg')\r\n            ]\r\n            let cubeTexture = new Three.CubeTextureLoader().load(urls);\r\n            this.scene.background = cubeTexture;\r\n        },\r\n\r\n        // 广告牌\r\n        loadBoard(){\r\n            const _this = this\r\n            let video = document.getElementById('videoContainer');\r\n            video.src = require('../../assets/video/bi.mp4'); // 设置视频地址\r\n            video.autoplay = \"autoplay\"; //要设置播放\r\n            video.loop = \"loop\"; //要设置循环播放\r\n            video.muted = \"muted\"; //要设置静音\r\n            let texture = new Three.VideoTexture(video)\r\n            let loader = new GLTFLoader();\r\n\r\n            // 解决压缩模型\r\n            const dracoLoader = new DRACOLoader();\r\n            dracoLoader.setDecoderPath('./draco/');\r\n            loader.setDRACOLoader(dracoLoader);\r\n\r\n            loader.load('billboard_-_lowpoly.glb', ( gltf ) => {\r\n                // gltf.openCastShadow()\r\n                gltf.scene.position.set(4, 2, -35)\r\n                gltf.scene.rotateY(-Math.PI / 2)\r\n                gltf.scene.scale.set(2.7, 2.7, 2.7)\r\n                gltf.scene.name = '广告牌'\r\n                let Object_6 = gltf.scene.getObjectByName('Object_6')\r\n                Object_6.material = new Three.MeshBasicMaterial({\r\n                    map: texture, // 设置纹理贴图\r\n                    transparent: true,\r\n                });\r\n                _this.scene.add(gltf.scene);\r\n            });\r\n\r\n        },\r\n\r\n        // // 实验楼模型\r\n        // loadBuilding(){\r\n        //     let loader = new GLTFLoader();\r\n        //     loader.load('75.gltf', ( _model ) => {\r\n        //         _model.scene.position.set(-30, 0, 5)\r\n        //         _model.scene.name = '实验楼'\r\n        //         this.scene.add(_model.scene);\r\n        //     });\r\n        // },\r\n\r\n        fly(){\r\n            let loader = new GLTFLoader();\r\n            loader.load('wrj.glb', ( _model ) => {\r\n                _model.scene.position.set(-200, 0, -100)\r\n                this.scene.add(_model.scene);\r\n                const end = { x:200, y:100, z:-100 }\r\n                let tween = new TWEEN.Tween(_model.scene.position)\r\n                    .to(end,10000)\r\n                    .delay(100) //开始时的延迟\r\n                    .yoyo(true) //是否开启yoyo循环\r\n                    .easing(TWEEN.Easing.Quadratic.InOut) //运动曲线\r\n                    .repeat(10) //重复次数\r\n                tween.start() //开启动画\r\n                tween.onUpdate((pos)=>{\r\n                    _model.scene.position.set(pos.x,pos.y)\r\n                })\r\n            });\r\n           \r\n        },\r\n\r\n        passcar(){\r\n            let loader = new GLTFLoader();\r\n            loader.load('passcar.gltf', ( _model ) => {\r\n                _model.scene.scale.set(8, 8, 8)\r\n                _model.scene.rotateY(-Math.PI)\r\n                _model.scene.position.set(-80, 0, -10)\r\n                _model.scene.name = '快递车'\r\n                this.scene.add(_model.scene);\r\n                const curve = new Three.CatmullRomCurve3([\r\n                    new Three.Vector3(-80, 0, 0),\r\n                    new Three.Vector3(-80, -100,0),\r\n                    new Three.Vector3(180,-140,0),\r\n                    // new Three.Vector3(-40,0, 40),\r\n                    // new Three.Vector3(0, 0, 40),\r\n                    // new Three.Vector3(40, 0, 40),\r\n                ]);\r\n\r\n                const points = curve.getPoints(50);\r\n                const geometry = new Three.BufferGeometry().setFromPoints(points);\r\n                const material = new Three.LineBasicMaterial({ color: 0x000000 });\r\n                const splineObject = new Three.Line(geometry, material);\r\n                splineObject.rotation.x = Math.PI * 0.5;\r\n                splineObject.position.y = 0.05;\r\n                this.scene.add(splineObject);\r\n                this.moveOnCurve(curve,_model.scene)\r\n            });  \r\n        },\r\n\r\n        moveOnCurve(curve,model) {\r\n            console.log(curve,model);\r\n            let progress = 0; // 物体运动时在运动路径的初始位置，范围0~1\r\n            const velocity = 0.001; // 影响运动速率的一个值，范围0~1，需要和渲染频率结合计算才能得到真正的速率\r\n            if (curve == null || model == null) {\r\n                console.log(\"Loading\")\r\n            } else {\r\n                if (progress <= 1 - velocity) {\r\n                    const point = curve.getPointAt(progress); //获取样条曲线指定点坐标\r\n                    const pointBox = curve.getPointAt(progress + velocity); //获取样条曲线指定点坐标\r\n                    console.log(point);\r\n                    if (point && pointBox) {\r\n                        model.position.set(point.x, point.y, point.z);\r\n                        model.lookAt(pointBox.x, pointBox.y, pointBox.z); //因为这个模型加载进来默认面部是正对Z轴负方向的，所以直接lookAt会导致出现倒着跑的现象，这里用重新设置朝向的方法来解决。\r\n                        var targetPos = pointBox   //目标位置点\r\n                        var offsetAngle = 0 //目标移动时的朝向偏移\r\n                        // //以下代码在多段路径时可重复执行\r\n                        var mtx = new Three.Matrix4()  //创建一个4维矩阵\r\n                        // .lookAt ( eye : Vector3, target : Vector3, up : Vector3 ) : this,构造一个旋转矩阵，从eye 指向 target，由向量 up 定向。\r\n                        mtx.lookAt(model.position, targetPos, model.up) //设置朝向\r\n                        mtx.multiply(new Three.Matrix4().makeRotationFromEuler(new Three.Euler(0, offsetAngle, 0)))\r\n                        var toRot = new Three.Quaternion().setFromRotationMatrix(mtx)  //计算出需要进行旋转的四元数值\r\n                        model.quaternion.slerp(toRot, 0.2)\r\n                    }\r\n                    progress += velocity;\r\n                } else {\r\n                    progress = 0;\r\n                }\r\n            }\r\n        },\r\n\r\n        \r\n        loadDataCenter(){\r\n            const _this = this\r\n            let loader = new GLTFLoader();\r\n            loader.load('datacenter.glb', ( _model ) => {\r\n                _model.scene.name = '数据中心'\r\n                _model.scene.rotateY(-Math.PI /2)\r\n                // _model.scene.position.set(30, 0, 5)\r\n                _model.scene.scale.set(7, 7, 7)\r\n                _this.scene.add(_model.scene);\r\n            });\r\n        },\r\n\r\n        // initFloor() {\r\n        //     let planeWidth = 1000;\r\n        //     let planeHeight = 1000;\r\n        //     const ground = new Three.Mesh(\r\n        //         new Three.PlaneGeometry(planeWidth, planeHeight),\r\n        //         new Three.MeshPhongMaterial({ color: 0xffffff, depthWrite: false })\r\n        //     );\r\n        //     ground.rotation.x = - Math.PI / 2;\r\n        //     ground.receiveShadow = true;\r\n        //     this.scene.add(ground);\r\n        // },\r\n\r\n        // 地板\r\n        initFloor(){\r\n            let floorGeometry = new Three.PlaneGeometry(1000,1000)  //平面几何\r\n            const material = new Three.MeshPhysicalMaterial({\r\n                color:0x808080,\r\n                side:Three.DoubleSide,\r\n                metalness:0,  //金属度  ，0代表非金属\r\n                roughness:0.1   //粗糙度  越小越光滑\r\n            })\r\n            const mesh = new Three.Mesh(floorGeometry,material)\r\n            mesh.rotation.x = Math.PI/2\r\n            // 地板接受阴影\r\n            mesh.receiveShadow = true\r\n            this.scene.add(mesh) \r\n        },\r\n        modelClick(e){\r\n            const _this = this\r\n            let pointer = {}\r\n            pointer.x = (e.clientX / window.innerWidth) * 2 - 1\r\n            pointer.y = -(e.clientY / window.innerHeight) * 2  + 1\r\n            let vector = new Three.Vector2(pointer.x,pointer.y)\r\n            let raycaster = new Three.Raycaster()   //用于鼠标交互捕捉到点击了什么位置\r\n            raycaster.setFromCamera(vector,this.camera)\r\n            let intersects = raycaster.intersectObjects(this.scene.children);\r\n            intersects.forEach(res=>{\r\n                if(res.object.name == 'Object_6'){\r\n                    _this.playVideo()\r\n                }else if(res.object.parent.name.includes('rack')){\r\n                    this.labelStyle.top = e.y - 35\r\n                    this.labelStyle.left = e.x - 35\r\n                    this.labelStyle.isShow = true\r\n                    this.labelStyle.name = res.object.parent.name\r\n                    this.clickDataCenter(res.object)\r\n                }else{\r\n                    console.log('未拾取地址');\r\n                }\r\n            })\r\n        },\r\n            \r\n        \r\n        clickDataCenter(curClick){\r\n            const material = new Three.MeshBasicMaterial({\r\n                color:0x808080,\r\n                transparent: true,\r\n            });\r\n            let parentModel = this.scene.getObjectByName(curClick.parent.parent.name)\r\n\r\n            let rackList = parentModel.children.filter(res=>{\r\n                return res.name.includes('rack')\r\n            })\r\n            rackList.map(item=>{\r\n                item.children[0].material = material\r\n            })\r\n\r\n            let Object = this.scene.getObjectByName(curClick.parent.name)\r\n            Object.children[0].material = new Three.MeshBasicMaterial({\r\n                side: Three.DoubleSide,\r\n                transparent: true,\r\n                depthTest: false,\r\n                depthWrite: true, // 无法被选择，鼠标穿透\r\n                color: 'blue',\r\n                opacity: 0.3,\r\n            });\r\n        },\r\n        playVideo(){\r\n            let video = document.getElementById('videoContainer');\r\n            if(!this.videoStatus){\r\n                video.play()\r\n                this.videoStatus = true\r\n            }else{\r\n                this.videoStatus = false\r\n                video.pause()\r\n            } \r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n    #container {\r\n\t\twidth: 100%;\r\n        height: 1080px;\r\n\t}\r\n    .datalabel{\r\n        position: absolute;\r\n        background-color: rgb(29 78 216 / 0.6);\r\n        padding:20px 40px;\r\n        border-radius: 20px;\r\n        color: #fff;\r\n    }\r\n    .label{\r\n        color: red;\r\n        font-size: 30px;\r\n    }\r\n\r\n</style>"]}]}
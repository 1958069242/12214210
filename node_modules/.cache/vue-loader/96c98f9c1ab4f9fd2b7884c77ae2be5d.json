{"remainingRequest":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\my-project\\digit\\src\\views\\car\\index.vue?vue&type=style&index=0&id=3af492ad&lang=less&scoped=true&","dependencies":[{"path":"D:\\my-project\\digit\\src\\views\\car\\index.vue","mtime":1690514497792},{"path":"D:\\my-project\\digit\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\my-project\\digit\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICAjY29udGFpbmVyIHsKCQl3aWR0aDogMTAwJTsKICAgICAgICBoZWlnaHQ6IDEwODBweDsKCX0KICAgIC5wb3B1cHsKICAgICAgICB3aWR0aDogNDAwcHg7CiAgICAgICAgaGVpZ2h0OiA0MDBweDsKICAgICAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogICAgICAgIHNwYW57CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhOwogICAgICAgIH0KICAgIH0KCgo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA8aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/car","sourcesContent":["<template>\r\n    <div class=\"webGl-page\">\r\n        <div id=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as Three from 'three'\r\nimport GUI from 'lil-gui'\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport TWEEN from '@tweenjs/tween.js'\r\n// const TWEEN = require('@tweenjs/tween.js')\r\nexport default {\r\n    data(){\r\n        return{\r\n            renderer: '', //渲染器\r\n            scene: '', //场景\r\n            light: '', //光源\r\n            camera: '', //相机\r\n            controls: '', //控制器\r\n            mesh:null,\r\n            doors:[],\r\n            carSatatus:false,\r\n        }\r\n    },\r\n    created(){\r\n\r\n    },\r\n    mounted(){\r\n        this.init3()\r\n        this.initSpotLight()\r\n        // this.initCylineder()\r\n        this.animate()\r\n        this.initFloor()\r\n        this.loadImage()\r\n        // this.createLights()\r\n        window.addEventListener('click',this.onClick)\r\n    },\r\n    methods:{\r\n        animate(time){\r\n            requestAnimationFrame(this.animate)\r\n            this.renderer.render(this.scene, this.camera); //执行渲染操作\r\n            this.controls.update()\r\n            this.renderer.shadowMap.enabled = true   //支持阴影\r\n            //定义阴影贴图类型 减少马赛克阴影\r\n            TWEEN.update(time)\r\n            this.renderer.shadowMap.type = Three.PCFSoftShadowMap\r\n        },\r\n\r\n        initCylineder(){\r\n            const geometry = new Three.BoxGeometry(200,400,500)\r\n            const material = new Three.MeshPhysicalMaterial({\r\n                color:0x6c6c6c,\r\n                side:Three.DoubleSide,\r\n            })\r\n            const mesh = new Three.Mesh(geometry,material)\r\n            this.scene.add(mesh)\r\n        },\r\n\r\n\r\n        // tween 补间动画，由开始位置和结束位置自动计算中间动画\r\n        setAmimateCamera(start,end){\r\n            let tween = new TWEEN.Tween(start).to(end,3000).easing(TWEEN.Easing.Quadratic.Out)\r\n            tween.onUpdate((that)=>{\r\n                this.camera.position.set(that.cx,that.cy,that.cz)\r\n                this.controls.target.set(that.ox,that.oy,that.oz)\r\n            })\r\n            tween.start()\r\n        },\r\n\r\n        // 聚光灯\r\n        initSpotLight(){\r\n            const spot = new Three.SpotLight('#fff',2)    //颜色，强度    \r\n            spot.angle = Math.PI / 8\r\n            spot.penumbra = 0.2  //横向  锥型半影衰减百分比\r\n            spot.decay = 2   //纵向\r\n            spot.distance = 30\r\n            spot.shadow.radius = 10\r\n            spot.position.set(-5,10,1)\r\n            spot.castShadow = true\r\n            this.scene.add(spot)\r\n        },\r\n\r\n        // 地板\r\n        initFloor(){\r\n            let floorGeometry = new Three.PlaneGeometry(30,30)  //平面几何\r\n            const material = new Three.MeshPhysicalMaterial({\r\n                color:0xffffff,\r\n                side:Three.DoubleSide,\r\n                metalness:0,  //金属度  ，0代表非金属\r\n                roughness:0.1   //粗糙度  越小越光滑\r\n            })\r\n            const mesh = new Three.Mesh(floorGeometry,material)\r\n            mesh.rotation.x = Math.PI/2\r\n\r\n            // 地板接受阴影\r\n            mesh.receiveShadow = true\r\n            this.scene.add(mesh)\r\n            \r\n        },\r\n\r\n\r\n\r\n        openCar(){\r\n            this.doors.map(res=>{\r\n                res.rotation.x = - Math.PI/2\r\n            })\r\n        },\r\n        closeCar(){\r\n            this.doors.map(res=>{\r\n                res.rotation.x = 0\r\n            })\r\n        },\r\n        carIn(){\r\n            this.setAmimateCamera(\r\n                {\r\n                    cx:4.25,\r\n                    cy:1.4,\r\n                    cz:-4.5,\r\n                    ox:0,\r\n                    oy:0.5,\r\n                    oz:0,\r\n                },\r\n                {\r\n                    cx:-0.27,\r\n                    cy:0.83,\r\n                    cz:0.6,\r\n                    ox:0,\r\n                    oy:0.5,\r\n                    oz:-3,\r\n                }\r\n            )\r\n        },\r\n        carOut(){\r\n            this.setAmimateCamera(\r\n                {\r\n                    cx:-0.27,\r\n                    cy:0.83,\r\n                    cz:0.6,\r\n                    ox:0,\r\n                    oy:0.5,\r\n                    oz:-3,\r\n                },\r\n                {\r\n                    cx:4.25,\r\n                    cy:1.4,\r\n                    cz:-4.5,\r\n                    ox:0,\r\n                    oy:0.5,\r\n                    oz:0,\r\n                }\r\n            )\r\n        },\r\n        onClick(e){\r\n            let pointer = {}\r\n            pointer.x = (e.clientX / window.innerWidth) * 2 - 1\r\n            pointer.y = -(e.clientY / window.innerHeight) * 2  + 1\r\n\r\n            let vector = new Three.Vector2(pointer.x,pointer.y)\r\n            let raycaster = new Three.Raycaster()   //用于鼠标交互捕捉到点击了什么位置\r\n            raycaster.setFromCamera(vector,this.camera)\r\n            let intersects = raycaster.intersectObjects(this.scene.children);\r\n            intersects.forEach(res=>{\r\n                if(res.object.name == 'Object_32'){\r\n                    if(!this.carSatatus){\r\n                        this.openCar()\r\n                        this.carSatatus = true\r\n                    }else{\r\n                        this.closeCar()\r\n                        this.carSatatus = false\r\n                    } \r\n                }\r\n            })\r\n        },\r\n\r\n\r\n        // 模型加载\r\n        init3(){\r\n            let container = document.getElementById('container');\r\n            this.camera = new Three.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\r\n            this.camera.position.set(0,1,10)\r\n            // this.camera.position.z = 2;\r\n            // this.camera.lookAt(new Three.Vector3(10, 10, 1)); // 相机看向\r\n\r\n            this.scene = new Three.Scene();\r\n            this.scene.background = new Three.Color(\"#ccc\")\r\n            this.scene.environment = new Three.Color(\"#ccc\")\r\n\r\n            // 网格\r\n            const grid = new Three.GridHelper(10,10)\r\n            grid.material.opacity = 0.2\r\n            grid.material.transparent = true\r\n            this.scene.add(grid);\r\n\r\n            // var ambient = new Three.AmbientLight(0x444444, 3); //添加光源  颜色和光照强度\r\n            // var axisHelper = new Three.AxesHelper(600); //添加辅助坐标系\r\n            // this.scene.add(ambient, axisHelper);\r\n\r\n            this.renderer = new Three.WebGLRenderer({\r\n                antialias: true\r\n            });\r\n            this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n            container.appendChild(this.renderer.domElement);\r\n\r\n            // 初始化控制器\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement); \r\n            this.controls.enableDamping = true    //渲染函数调用update 重新计算\r\n            this.controls.target.set(0, 0, 0); // 设置控制器的焦点，使控制器围绕这个焦点进行旋转\r\n            this.controls.minDistance = 0; // 设置移动的最短距离（默认为零）\r\n            this.controls.maxDistance = 15; // 设置移动的最长距离（默认为无穷）\r\n            this.controls.maxPolarAngle = 80 / 360 *2 * Math.PI; //绕垂直轨道的距离（范围是0-Math.PI,默认为Math.PI）\r\n            this.controls.minPolarAngle = 0; \r\n            this.controls.enablePan = false; //禁用右键功能\r\n\r\n            \r\n           \r\n            const glassMaterial = new Three.MeshPhysicalMaterial({\r\n                color:\"#793e3e\",\r\n                metalness:0.25,  //金属度  ，0代表非金属\r\n                roughness:0,  //粗糙度  越小越光滑\r\n                transmission:1.0   //透光度，玻璃变得真实\r\n            })\r\n\r\n            let bodyMaterial = new Three.MeshPhysicalMaterial({\r\n                color:\"yellow\",\r\n                metalness:0,  //金属度  ，0代表非金属\r\n                roughness:0.1,  //粗糙度  越小越光滑\r\n                clearcoat: 1.0  //喷漆\r\n            })\r\n            const wheelMaterial = new Three.MeshPhysicalMaterial({\r\n                color:\"#793e3e\",\r\n                metalness:0.25,  //金属度  ，0代表非金属\r\n                roughness:0,  //粗糙度  越小越光滑\r\n                transmission:1.0   //透光度，玻璃变得真实\r\n            })\r\n            const openCar = this.openCar\r\n            const closeCar = this.closeCar\r\n            const carIn = this.carIn\r\n            const carOut = this.carOut\r\n            const gui = new GUI()\r\n            let obj = {\r\n                bodyColor : '#6e2121',\r\n                glassColor:'#aaa',\r\n                wheel:'#000',\r\n                openCar,\r\n                closeCar,\r\n                carIn,\r\n                carOut,\r\n            }\r\n           \r\n\r\n            gui.addColor(obj,\"bodyColor\").name('车声颜色').onChange(val=>{\r\n                bodyMaterial.color.set(val)\r\n            })\r\n            gui.addColor(obj,\"glassColor\").name('玻璃颜色').onChange(val=>{\r\n                glassMaterial.color.set(val)\r\n            })\r\n            gui.addColor(obj,\"glassColor\").name('轮胎颜色').onChange(val=>{\r\n                wheelMaterial.color.set(val)\r\n            })\r\n\r\n            gui.add(obj,\"openCar\").name('开车门')\r\n            gui.add(obj,\"closeCar\").name('关闭车门')\r\n            gui.add(obj,\"carIn\").name('车内视角')\r\n            gui.add(obj,\"carOut\").name('车外视角')\r\n\r\n\r\n            // 汽车\r\n            let loader = new GLTFLoader();\r\n            loader.load('car.glb',  ( gltf )=> {\r\n                const { scene: object } = gltf\r\n                object.traverse((obj)=>{\r\n                    if(obj.name =='Object_32'){\r\n                        this.doors.push(obj)\r\n                    }\r\n                    if(obj.name =='Object_32' || obj.name =='Object_33'){\r\n                        obj.material = bodyMaterial\r\n                        \r\n                    }else if(obj.name =='Object_28'){\r\n                        obj.material = glassMaterial\r\n                    }else if(obj.name =='Object_41' || obj.name =='Object_42' || obj.name =='Object_43' || obj.name =='Object_44'){\r\n                        obj.material = wheelMaterial\r\n                    }\r\n                    // 车模型产生阴影\r\n                    obj.castShadow = true\r\n                })\r\n                this.scene.add(gltf.scene);\r\n            });\r\n\r\n\r\n            // 添加灯光\r\n            const ambientLight = new Three.AmbientLight(0xe0ffff, 0.6)\r\n            this.scene.add(ambientLight)\r\n\r\n            const light1 = new Three.DirectionalLight(0xffffff,1)\r\n            light1.position.set(0,0,1)\r\n            this.scene.add(light1)\r\n\r\n            const light2 = new Three.DirectionalLight(0xffffff,1)\r\n            light2.position.set(0,2,10)\r\n            this.scene.add(light2)\r\n\r\n            const light3 = new Three.DirectionalLight(0xffffff,1)\r\n            light3.position.set(0,0,-10)\r\n            this.scene.add(light3)\r\n        },\r\n\r\n        loadImage() {\r\n            for (let index = 0; index < 4; index++) {\r\n                let url = require('../../assets/img/c80feff5e075efffc915dfceca2a2692(1).jpg')\r\n                new Three.TextureLoader().load(url,\r\n                    (texture) => {\r\n                        const SIZE = 30;\r\n                        const img = texture.image;\r\n                        let height = (img && img.height) || SIZE;\r\n                        let width = (img && img.width) || SIZE;\r\n                        height = (SIZE / width) * height;\r\n                        width = SIZE;\r\n                        const mat = new Three.MeshBasicMaterial({ map: texture, side: Three.DoubleSide, transparent: true });\r\n                        const geom = new Three.PlaneGeometry(width, height);\r\n                        const mesh = new Three.Mesh(geom, mat);\r\n                       \r\n                        if(index == 0){\r\n                            mesh.position.set(0,height/2,15)\r\n                        }else if(index == 1){\r\n                            mesh.rotateY(-Math.PI / 2)\r\n                            mesh.position.set(15,height/2,0)\r\n                        }\r\n                        else if(index == 2){\r\n                            mesh.rotateY(Math.PI / 2)\r\n                            mesh.position.set(-15,height/2,0)\r\n                        }\r\n                        else if(index == 3){\r\n                            mesh.position.set(0,height/2,-15)\r\n                        }\r\n                        else if(index == 4){\r\n                            mesh.position.set(0,0,0)\r\n                            mesh.rotateX(Math.PI / 2)\r\n                        }else{\r\n                            console.log(99999999999999999);\r\n                        }\r\n                        this.scene.add(mesh);\r\n                    }\r\n                );\r\n            } \r\n        },\r\n\r\n        // 点光源\r\n        createLights() {\r\n            // const ambientLight = new Three.AmbientLight(0xe0ffff, 0.6)\r\n            // this.scene.add(ambientLight)\r\n\r\n            // 前后\r\n            const pointLight1 = new Three.PointLight(0xe0ffff, 0.1, 20) \r\n            pointLight1.position.set(0, 15, -8)\r\n            this.scene.add(pointLight1)\r\n            const pointLightHelper1 = new Three.PointLightHelper(pointLight1, 1)\r\n            this.scene.add(pointLightHelper1)\r\n\r\n\r\n            const pointLight2 = new Three.PointLight(0xe0ffff, 0.1, 20) \r\n            // pointLight2.position.set(0, 3, -6)\r\n            this.scene.add(pointLight2)\r\n            const pointLightHelper2 = new Three.PointLightHelper(pointLight2, 1)\r\n            this.scene.add(pointLightHelper2)\r\n\r\n\r\n            // const pointLight3 = new Three.PointLight(0xe0ffff, 0.1, 20) \r\n            // pointLight3.position.set(-12, 3, 6)\r\n            // this.scene.add(pointLight3)\r\n            // const pointLightHelper3 = new Three.PointLightHelper(pointLight3, 1)\r\n            // this.scene.add(pointLightHelper3)\r\n\r\n\r\n            // const pointLight4 = new Three.PointLight(0xe0ffff, 0.1, 20) \r\n            // pointLight4.position.set(-12, 4, -4)\r\n            // this.scene.add(pointLight4)\r\n            // const pointLightHelper4 = new Three.PointLightHelper(pointLight4, 1)\r\n            // this.scene.add(pointLightHelper4)\r\n\r\n\r\n            // const pointLight5 = new Three.PointLight(0xe0ffff, 0.1, 20) \r\n            // pointLight5.position.set(12, 4, -8)\r\n            // this.scene.add(pointLight5)\r\n            // const pointLightHelper5 = new Three.PointLightHelper(pointLight5, 1)\r\n            // this.scene.add(pointLightHelper5)\r\n\r\n\r\n            // const pointLight6 = new Three.PointLight(0xe0ffff, 0.1, 20) \r\n            // pointLight6.position.set(12, 4, 0)\r\n            // this.scene.add(pointLight6)\r\n            // const pointLightHelper6 = new Three.PointLightHelper(pointLight6, 1)\r\n            // this.scene.add(pointLightHelper6)\r\n\r\n\r\n            // const pointLight7 = new Three.PointLight(0xe0ffff, 0.1, 20) \r\n            // pointLight7.position.set(12, 4, 8)\r\n            // this.scene.add(pointLight7)\r\n            // const pointLightHelper7 = new Three.PointLightHelper(pointLight7, 1)\r\n            // this.scene.add(pointLightHelper7)\r\n\r\n            // const pointLight8 = new Three.PointLight(0xe0ffff, 0.1, 20) \r\n            // pointLight8.position.set(12, 4, 8)\r\n            // this.scene.add(pointLight8)\r\n            // const pointLightHelper8 = new Three.PointLightHelper(pointLight8, 1)\r\n            // this.scene.add(pointLightHelper8)\r\n\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    #container {\r\n\t\twidth: 100%;\r\n        height: 1080px;\r\n\t}\r\n    .popup{\r\n        width: 400px;\r\n        height: 400px;\r\n        // background-color: #fff;\r\n        span{\r\n            display: block;\r\n            background-color: aqua;\r\n        }\r\n    }\r\n\r\n\r\n</style>"]}]}